[
  {
    "constant": false,
    "inputs": [
      {
        "name": "_new",
        "type": "address"
      }
    ],
    "name": "setOwner",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "keyServer",
        "type": "address"
      }
    ],
    "name": "requireKeyServer",
    "outputs": [
      {
        "name": "",
        "type": "uint8"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "keyServersCount",
    "outputs": [
      {
        "name": "",
        "type": "uint8"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "maxServerKeyRetrievalRequests",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "drain",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "serverKeyRetrievalFee",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "name": "keyServerSetAddressInit",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "payable": true,
    "stateMutability": "payable",
    "type": "fallback"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "name": "serverKeyId",
        "type": "bytes32"
      }
    ],
    "name": "ServerKeyRetrievalRequested",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "serverKeyId",
        "type": "bytes32"
      },
      {
        "indexed": false,
        "name": "serverKeyPublic",
        "type": "bytes"
      }
    ],
    "name": "ServerKeyRetrieved",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "serverKeyId",
        "type": "bytes32"
      }
    ],
    "name": "ServerKeyRetrievalError",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "serverKeyId",
        "type": "bytes32"
      },
      {
        "indexed": false,
        "name": "serverKeyPublic",
        "type": "bytes"
      },
      {
        "indexed": false,
        "name": "threshold",
        "type": "uint256"
      }
    ],
    "name": "ServerKeyRetrieved",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "old",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "current",
        "type": "address"
      }
    ],
    "name": "NewOwner",
    "type": "event"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "serverKeyId",
        "type": "bytes32"
      }
    ],
    "name": "retrieveServerKey",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "serverKeyId",
        "type": "bytes32"
      },
      {
        "name": "serverKeyPublic",
        "type": "bytes"
      },
      {
        "name": "threshold",
        "type": "uint8"
      }
    ],
    "name": "serverKeyRetrieved",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "serverKeyId",
        "type": "bytes32"
      }
    ],
    "name": "serverKeyRetrievalError",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "serverKeyRetrievalRequestsCount",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "getServerKeyRetrievalRequest",
    "outputs": [
      {
        "name": "",
        "type": "bytes32"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "serverKeyId",
        "type": "bytes32"
      },
      {
        "name": "keyServer",
        "type": "address"
      }
    ],
    "name": "isServerKeyRetrievalResponseRequired",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "newFee",
        "type": "uint256"
      }
    ],
    "name": "setServerKeyRetrievalFee",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "newLimit",
        "type": "uint256"
      }
    ],
    "name": "setMaxServerKeyRetrievalRequests",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "serverKeyId",
        "type": "bytes32"
      }
    ],
    "name": "deleteServerKeyRetrievalRequest",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  }
]
